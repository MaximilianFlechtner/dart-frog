{"remainingRequest":"/Users/maximilianflechtner/Documents/Projecte.nosync/web/dart-frog/docs/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/maximilianflechtner/Documents/Projecte.nosync/web/dart-frog/docs/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/maximilianflechtner/Documents/Projecte.nosync/web/dart-frog/docs/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/maximilianflechtner/Documents/Projecte.nosync/web/dart-frog/docs/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/maximilianflechtner/Documents/Projecte.nosync/web/dart-frog/docs/src/roadmap.md?vue&type=template&id=9cf3ddec&","dependencies":[{"path":"/Users/maximilianflechtner/Documents/Projecte.nosync/web/dart-frog/docs/src/roadmap.md","mtime":1653456588269},{"path":"/Users/maximilianflechtner/Documents/Projecte.nosync/web/dart-frog/docs/node_modules/cache-loader/dist/cjs.js","mtime":1653454670885},{"path":"/Users/maximilianflechtner/Documents/Projecte.nosync/web/dart-frog/docs/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1653454670913},{"path":"/Users/maximilianflechtner/Documents/Projecte.nosync/web/dart-frog/docs/node_modules/cache-loader/dist/cjs.js","mtime":1653454670885},{"path":"/Users/maximilianflechtner/Documents/Projecte.nosync/web/dart-frog/docs/node_modules/vue-loader/lib/index.js","mtime":1653454670605},{"path":"/Users/maximilianflechtner/Documents/Projecte.nosync/web/dart-frog/docs/node_modules/@vuepress/markdown-loader/index.js","mtime":1653454671398}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}